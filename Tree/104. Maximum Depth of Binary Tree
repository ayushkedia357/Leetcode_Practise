# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        '''
        #recursive
        def traversal(depth,maxi,root):
            if root==None:
                return maxi
            maxi=traversal(depth+1,maxi,root.left)
            maxi=max(depth,maxi)
            maxi=traversal(depth+1,maxi,root.right)
            return maxi
        '''
        '''
        #using stack
        if root==None:
                return 0
        stack=[]
        maxi=0
        temp=0
        while(1):
            if root!=None:
                print(root.val,maxi,temp)
                stack.append([root,temp+1])
                temp+=1
                root=root.left
            elif(stack):
                temp1=stack.pop()
                maxi=max(temp1[1],maxi)
                root=temp1[0].right
                temp=temp1[1]
            else:
                break
  
        return maxi
        '''
        #using queue
        if root==None:
            return 0
        q=[]
        q.append([root,1])
        maxi=1
        while(q):
            temp=q.pop(0)
            if temp[0].left==None and temp[0].right==None:
                maxi=max(maxi,temp[1])
                continue
            if temp[0].left:
                q.append([temp[0].left,temp[1]+1])
            if temp[0].right:
                q.append([temp[0].right,temp[1]+1]) 
                
        return maxi
        
