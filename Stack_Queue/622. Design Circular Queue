class MyCircularQueue:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the queue to be k.
        """
        self.q=[0]*k
        self.front=0
        self.rear=-1
        self.capacity=k
        

    def enQueue(self, value: int) -> bool:
        """
        Insert an element into the circular queue. Return true if the operation is successful.
        """
        if(self.isFull()):
            return False
        self.rear+=1
        self.rear=self.rear%self.capacity
        '''
        if(self.rear==self.capacity):
            self.rear=0
        '''
        self.q[self.rear]=value
        return True

    def deQueue(self) -> bool:
        """
        Delete an element from the circular queue. Return true if the operation is successful.
        """
        if(self.isEmpty()):
            return False
        if(self.front==self.rear):
            self.front=0
            self.rear=-1
        else:
            self.front+=1
            self.front=self.front%self.capacity
        return True
    def Front(self) -> int:
        """
        Get the front item from the queue.
        """
        if(self.isEmpty()):
            return -1
        return self.q[self.front]

    def Rear(self) -> int:
        """
        Get the last item from the queue.
        """
        if(self.isEmpty()):
            return -1
        return self.q[self.rear]

    def isEmpty(self) -> bool:
        """
        Checks whether the circular queue is empty or not.
        """
        if(self.rear==-1):
            return True
        return False
    def isFull(self) -> bool:
        """
        Checks whether the circular queue is full or not.
        """
        if ((self.rear==(self.capacity-1) and self.front==0) or (self.rear==self.front-1 and self.rear!=-1)):
            return True
        return False


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
