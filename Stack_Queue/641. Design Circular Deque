class MyCircularDeque:

    def __init__(self, k: int):
        """
        Initialize your data structure here. Set the size of the deque to be k.
        """
        self.q=[0]*k
        self.rear=-1
        self.front=0
        self.size=k
        self.currlen=0

    def insertFront(self, value: int) -> bool:
        """
        Adds an item at the front of Deque. Return true if the operation is successful.
        """
        if(self.isFull()):
            return False
        self.currlen+=1
        self.front-=1
        if(self.front==-1):
            self.front=self.size-1
        self.q[self.front]=value
        return True
    
    def insertLast(self, value: int) -> bool:
        """
        Adds an item at the rear of Deque. Return true if the operation is successful.
        """
        if(self.isFull()):
            return False
        self.currlen+=1
        self.rear+=1
        self.rear=self.rear%self.size
        self.q[self.rear]=value
        return True

    def deleteFront(self) -> bool:
        """
        Deletes an item from the front of Deque. Return true if the operation is successful.
        """
        if(self.isEmpty()):
            return False
        if(self.front==self.rear):
            self.front=0
            self.rear=-1
        elif(self.front==self.size-1):
            self.front=0
        else:
            self.front+=1
        self.currlen-=1
        return True

    def deleteLast(self) -> bool:
        print(self.rear,self.front)
        """
        Deletes an item from the rear of Deque. Return true if the operation is successful.
        """
        if(self.isEmpty()):
            return False
        if(self.rear==-1):
            self.rear=self.size-1
        if(self.front==self.rear):
            self.front=0
            self.rear=-1
        elif(self.rear==0):
            self.rear=self.size-1
        else:
            self.rear-=1
        self.currlen-=1
        return True
        

    def getFront(self) -> int:
        """
        Get the front item from the deque.
        """
        if(self.isEmpty()):
            return -1
        return self.q[self.front]

    def getRear(self) -> int:
        """
        Get the last item from the deque.
        """
        if(self.isEmpty()):
            return -1
        return self.q[self.rear]

    def isEmpty(self) -> bool:
        """
        Checks whether the circular deque is empty or not.
        """
        if(self.rear==-1 and self.front==0):
            return True
        return False

    def isFull(self) -> bool:
        """
        Checks whether the circular deque is full or not.
        """
        if ((self.rear==(self.size-1) and self.front==0) or (self.rear==self.front-1 and self.rear!=-1)):
            return True
        return False
        '''
        if (self.currlen==self.size):
            return True
        return False
        '''

# Your MyCircularDeque object will be instantiated and called as such:
# obj = MyCircularDeque(k)
# param_1 = obj.insertFront(value)
# param_2 = obj.insertLast(value)
# param_3 = obj.deleteFront()
# param_4 = obj.deleteLast()
# param_5 = obj.getFront()
# param_6 = obj.getRear()
# param_7 = obj.isEmpty()
# param_8 = obj.isFull()
