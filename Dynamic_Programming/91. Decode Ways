class Solution:
    def numDecodings(self, s: str) -> int:
        '''
        def comb(p,q):
            res1 = 1
            for i in range(1,p):
                res1 = res1*i
            res2 = 1
            for i in range(1,q):
                res2 = res2*i
            res3 = 1
            for i in range(1,p-q):
                res3 = res3*i
            return res1//(res2*res3)
        
        if s[0] == '0':
            s=s[1:]
        n = len(s)
        dbl = 0
        for i in range(1,n):
            if int(s[i-1]+s[i]) <= 26:
                dbl+=1
        if n==0:
            return 0
        ways = 1
        for i in range(dbl-1,0,-1):
            ways += comb(dbl,i)
        return ways
        '''
        if s=="":
            return 0
        d = {}
        def dfs(s,d):
            if len(s) and s[0]=="0":
                return 0
            
            if len(s)<=1:
                return 1
            
            if s in d:
                return d[s]
            
            if int(s[0]+s[1])<=26:
                d[s] = dfs(s[2:],d) + dfs(s[1:],d)
                return d[s]
            else:
                d[s] = dfs(s[1:],d)
                return d[s]
            
        return dfs(s,d)
                
