class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        tot = sum(nums)
        if tot%2 == 1:
            return False
        
        part = tot//2
        n=len(nums)
        
        memo = [[False for i in range(part+1)] for j in range(n+1)]
                
        '''
        def partitionrec(memo,nums,part,n):
            if part == 0:
                return True
            if n == 0 and part != 0:
                return False
            
            if nums[n-1] > part:
                return partitionrec(memo,nums,part,n-1)
            
            return partitionrec(memo,nums,part,n-1) or partitionrec(memo,nums,part - nums[n-1],n-1)
                
            #return memo[n][part]        
        return partitionrec(memo,nums,part,n)

        #2d dp
        memo[0][0] = True
        for i in range(1,n+1):
            for j in range(1,part+1):
                if nums[i-1] > j:
                    memo[i][j] = memo[i-1][j]
                else:
                    memo[i][j] = memo[i-1][j-nums[i-1]] or memo[i-1][j]
        return memo[n][part]
        '''
        dp = [False for i in range(part+1)]
        dp[0] = True
        for i in nums:
            dp1=[]+dp
            for j in range(i,part+1):
                #print(dp,dp1)
                dp[j] = dp[j] or dp1[j-i]
        return dp[part]
