class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        '''
        n=len(coins)
        memo = [[0]*(amount+1)]*(n+1)
        
        for i in range(1,amount+1):
            memo[0][i] = amount+1
            
        
        for i in range(1,n+1):
            for j in range(1,amount+1):
                if coins[i-1] <= j:
                    memo[i][j] = min(1 + memo[i][j-coins[i-1]],memo[i-1][j])
                else:
                    memo[i][j] = memo[i-1][j]

        if memo[n][amount] == amount+1:
            return -1
        return memo[n][amount]
        '''
        dp = [amount+1]*(amount+1)  #amount size array initialize with int_max or amount+1
        dp[0] = 0    
        n=len(coins)
        
        for i in coins:
            for j in range(i,amount+1):      #same array will be used for diff coin value and the minimum will be taken care of
                dp[j] = min(dp[j],1+dp[j-i])     # keep overwriting the array but only from the coin value.
        if dp[amount] == amount+1:
            return -1
        return dp[amount]
