class Solution:
    def dfs(self,increasingPath,graph,vert,maximum):
        
        for adj in graph[vert]: 
            maximum[0] = self.dfs(increasingPath+1,graph,adj,maximum)  #calculatin the length of each path taken
            
        return max(maximum[0],increasingPath)
    
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
            
        if matrix == [] or matrix == [[]]:
            return 0
        
        '''
        direct = [[1,0],[0,1],[-1,0],[0,-1]]
        graph = {}
        m = len(matrix)
        n = len(matrix[0])

        for i in range(m):          #initialize graph
            for j in range(n):
                graph[(i,j)] = []   # node will be not the value rather it'll be its address ie index in 2d array
                
        for i in range(m):          #building graph
            for j in range(n):
                for k in direct:        #for ll 4 directions
                    dx = i + k[0]
                    dy = j + k[1]
                    if 0<=dx<m and 0<=dy<n:
                        if matrix[i][j] < matrix[dx][dy]:
                            graph[(i,j)].append((dx,dy))   #graph = {(1,0):[(0,0)]}
        
        #print(graph)    ###  first get this right then move further  ###
    
        
            
        maxi = 0
        length = 1
        for i in range(m):
            for j in range(n):
                if len(graph[(i,j)]) > 0:           # only if any adj nodes are there
                    length = self.dfs(1,graph,(i,j),[0])   #running dfs for all edges
                maxi = max(maxi,length) 

        return maxi
        '''
        if matrix == [] or matrix == [[]]:
            return 0
        
        def longpathrec(memo,m,n,matrix):
            if (m,n) in memo:
                return memo[(m,n)]
            bottom = 0
            top = 0
            right = 0
            left = 0
            
            if 0<=(m+1)<len(matrix) and matrix[m][n] < matrix[m+1][n]:
                bottom = longpathrec(memo,m+1,n,matrix)
                
            if 0<=(m-1)<len(matrix) and matrix[m][n] < matrix[m-1][n]:
                top = longpathrec(memo,m-1,n,matrix)
                
            if 0<=(n+1)<len(matrix[0]) and matrix[m][n] < matrix[m][n+1]:
                right = longpathrec(memo,m,n+1,matrix)
                
            if 0<=(n-1)<len(matrix[0]) and matrix[m][n] < matrix[m][n-1]:
                left = longpathrec(memo,m,n-1,matrix)
                
            memo[(m,n)] = 1+max(left,right,top,bottom)
            return memo[(m,n)]
        
        x = len(matrix)
        y = len(matrix[0])
        memo = {}
        maxi = 0
        
        for m in range(x):
            for n in range(y):
                maxi = max(maxi,longpathrec(memo,m,n,matrix))
        
        return maxi
        

            
